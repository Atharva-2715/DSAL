//There are flight paths between cities. If there is a flight between city A and city B then there
is an edge between the cities. The cost of the edge can be the time that flight take to reach
city B from A, or the amount of fuel used for the journey. Represent this as a graph. The
node can be represented by airport name or name of the city. Use adjacency list
representation of the graph or use adjacency matrix representation of the graph.
Check whether the graph is connected or not. Justify the storage representation used

#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

unordered_map<string, vector<string>> graph;
unordered_map<string, bool> visited;

void dfs(string city) {
    visited[city] = true;
    for (string neighbor : graph[city]) {
        if (!visited[neighbor]) {
            dfs(neighbor);
        }
    }
}

int main() {
    int edges;
    cout << "Enter number of flight connections: ";
    cin >> edges;

    if (edges == 0) {
        cout << "No flight connections provided.\n";
        return 0;
    }

    cout << "Enter each connection (city1 city2):\n";
    for (int i = 0; i < edges; i++) {
        string a, b;
        cin >> a >> b;
        graph[a].push_back(b);
        graph[b].push_back(a); // Undirected graph
    }

    // Check if graph has any cities to start DFS
    if (graph.empty()) {
        cout << "No cities provided.\n";
        return 0;
    }

    // Start DFS from the first city in the graph
    string start = graph.begin()->first;
    dfs(start);

    // Check if all cities are visited
    bool connected = true;
    for (auto& city : graph) {
        if (!visited[city.first]) {
            connected = false;
            break;
        }
    }

    cout << "\nThe graph is " << (connected ? "connected." : "not connected.") << endl;

    return 0;
}
